print("Hello!")
import pandas as pd
import pandas as pd
import numpy as np
import pandas as pd
import numpy as np
import pandas as pd
import numpy as np
np.random()
np.random(5)
[random() for _ in range(10)]
import random
random()
x = [random() for _ in range(100)]
y = [randint() for _ in range(100)]
df = pd.DataFrame(dict(x=x, y=y))
df
df.head()
x = [random() for _ in range(100)]
y = [randint() for _ in range(100)]
df = pd.DataFrame(dict(x=x, y=y))
df.head()
import pandas as pd
import numpy as np
from random import randint, random
x = [random() for _ in range(100)]
y = [randint() for _ in range(100)]
df = pd.DataFrame(dict(x=x, y=y))
df.head()
x = [random() for _ in range(100)]
y = [randint() for _ in range(100)]
df = pd.DataFrame(dict(x=x, y=y))
df.head()
x = [random() for _ in range(100)]
y = [random() for _ in range(100)]
df = pd.DataFrame(dict(x=x, y=y))
df.head()
x = [random() for _ in range(100)]
y = [random() for _ in range(100)]
df = pd.DataFrame(dict(x=x, y=y))
df.plot.scatter('x','y')
df.plot.scatter('x','y')
print("Hello, World!")
setwd("/Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2023-07-R/repo")
x <- 10.5       # assign a decimal value
x              # print the value of x
class(x)      # print the class name of x
x <- 10.5       # assign a decimal value
x              # print the value of x
## install.packages("tm")
library(tm)
class(x)      # print the class name of x
k <- 1
k              # print the value of k
class(k)       # print the class name of k
is.integer(k)  # is k an integer?
y <- as.integer(3)
y              # print the value of y
class(y)       # print the class name of y
is.integer(y)  # is y an integer?
y <- 3L
is.integer(y)  # is y an integer?
as.integer(3.14)    # coerce a numeric value
as.integer("5.27")  # coerce a decimal string
as.integer("Joe")   # coerce an non-decimal string
as.integer(TRUE)    # the numeric value of TRUE
as.integer(FALSE)   # the numeric value of FALSE
x <- 1
y <- 2   # sample values
z <- x > y      # is x larger than y?
z              # print the logical value
class(z)       # print the class name of z
u <- TRUE
v <- FALSE
u & v          # u AND v
u | v          # u OR v
!u             # negation of u
a <- T
b <- F
a & b
x <- as.character(3.14)
x
class(x)       # print the class name of x
fname <- "Joe"
lname <-"Smith"
paste(fname, lname)
paste("A", "B", "C", sep="--")
sprintf("%s has %d dollars", "Sam", 100)
substr("Mary has a little lamb.", start=3, stop=12)
sub("little", "big", "Mary has a little lamb.")
## install.packages("tm")
library(tm)
x <- 10.5       # assign a decimal value
x              # print the value of x
class(x)      # print the class name of x
k <- 1
k              # print the value of k
class(k)       # print the class name of k
is.integer(k)  # is k an integer?
y <- as.integer(3)
y              # print the value of y
class(y)       # print the class name of y
is.integer(y)  # is y an integer?
y <- 3L
is.integer(y)  # is y an integer?
as.integer(3.14)    # coerce a numeric value
as.integer("5.27")  # coerce a decimal string
as.integer("Joe")   # coerce an non-decimal string
as.integer(TRUE)    # the numeric value of TRUE
as.integer(FALSE)   # the numeric value of FALSE
x <- 1
y <- 2   # sample values
z <- x > y      # is x larger than y?
z              # print the logical value
class(z)       # print the class name of z
u <- TRUE
v <- FALSE
u & v          # u AND v
u | v          # u OR v
!u             # negation of u
a <- T
b <- F
a & b
x <- as.character(3.14)
x
class(x)       # print the class name of x
fname <- "Joe"
lname <-"Smith"
paste(fname, lname)
paste("A", "B", "C", sep="--")
sprintf("%s has %d dollars", "Sam", 100)
substr("Mary has a little lamb.", start=3, stop=12)
sub("little", "big", "Mary has a little lamb.")
c(2, 3, 5)
c(TRUE, FALSE, TRUE, FALSE, FALSE)
c("aa", "bb", "cc", "dd", "ee")
s1 <- 2:5
s1
s2 <- seq(from=1, to=5, by=2)  # You can drop the argument names write seq(1,5,2)
s2
s3 <- rep(1, 5)
s3
length(c("aa", "bb", "cc", "dd", "ee"))
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc", "dd", "ee")
c(n, s)
a <- c(1, 3, 5, 7)
b <- c(1, 2, 4, 8)
5 * a
a + b
a - b
a * b
a / b
u <- c(10, 20, 30)
v <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
u + v
s <- c("aa", "bb", "cc", "dd", "ee")
s[3]
s[-3]
s[10]
s <- c("aa", "bb", "cc", "dd", "ee")
s[c(2, 3)]
s[c(2, 3, 3)]
s[c(2, 1, 3)]
s[2:4]
s <- c("aa", "bb", "cc", "dd", "ee")
L = c(FALSE, TRUE, FALSE, TRUE, FALSE)
s[L]
s[c(FALSE, TRUE, FALSE, TRUE, FALSE)]
v <- c("Mary", "Sue")
names(v) <- c("First", "Last")
v
v["First"]
v[c("Last", "First")]
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc", "dd", "ee")
b <- c(TRUE, FALSE, TRUE, FALSE, FALSE)
x <- list(n, s, b, 3)   # x contains copies of n, s, b
x
x[2]
x[c(2, 4)]
x[2]
x[[2]]
x[[2]][1] = "ta"
x[[2]]
s
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc")
b <- c(TRUE, FALSE, TRUE)
df <- data.frame(n, s, b) # df is a data frame
df
mtcars
mtcars[1, 2]
mtcars["Mazda RX4", "cyl"]
nrow(mtcars)    # number of data rows
ncol(mtcars)    # number of columns
dim(mtcars)
help(mtcars)
head(mtcars)
mtcars[[9]]
mtcars[["am"]]
mtcars$am
mtcars[, "am"]
mtcars[1]
mtcars["mpg"]
mtcars[["mpg"]]
mtcars[c("mpg", "hp")]
mtcars[24,]
mtcars[c(3, 24),]
mtcars["Camaro Z28",]
mtcars[c("Datsun 710", "Camaro Z28"),]
L <- mtcars$am == 0
L
mtcars[L,]
mtcars[L,]$mpg
names(df)[names(df) == 'old.var.name'] <- 'new.var.name'
##library(gdata)                   # load gdata package
##help(read.xls)                   # documentation
##mydata <- read.xls("mydata.xls")  # read from first sheet
##library(XLConnect)               # load XLConnect package
##wk <- loadWorkbook("mydata.xls")
##df <- readWorksheet(wk, sheet="Sheet1")
mydata <- read.table("mydata.txt")  # read text file
mydata                             # print data frame
mydata <- read.csv("mydata.csv")  # read csv file
mydata
help(read.csv)
getwd()               # get current working directory
## setwd("<new path>")   # set working directory
## setwd("C:/MyDoc")
airquality
plot(airquality)
plot(airquality[, c("Temp", "Wind")])
plot(airquality$Temp, type='l')
?plot
temps <- table(airquality$Temp)
temps
temps.df <- data.frame(temps)
temps.df
plot(temps.df, xlab="Temp", type="b")
x <- runif(1, 0, 10) # From the Uniform Distribution
if(x > 3) {
y <- 10
} else {
y <- 0
}
x
y
z <- if(x > 3) {
10
} else {
0
}
z
for(i in 1:10) {
print(i)
}
x <- c("a", "b", "c", "d")
for (i in 1:4) {
# Print out each element of 'x'
print(x[i])
}
x
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
for (i in 1:100) {
if (i <= 20) {
# Skip the first 20 iterations
next
}      # Do something here
}
for (i in 1:100) {
print(i)
if (i > 20) {
# Stop loop after 20 iterations
break
}
}
x <- 5
xx <- c(4, 6, 7, 8, 2, 11)
compute_zscore <- function(val, vec) {
z <- (val - mean(vec)) / sd(vec)
}
print(compute_zscore(x, xx))
print(compute_zscore(x, c(1, 1, 1, 1)))
xx_na <- c(1, NA, 3, 5)
print(compute_zscore(x, xx_na))
is_odd <- function(x){ if (x %% 2 == 1) {
return(1)
} else {
return(0)
}
}
is_odd(4)
is_odd(3)
threshold_vals <- function(p, thresh = 0.5) {
# for each element in p, returns TRUE if value > thresh, else FALSE
p > thresh
}
threshold_vals(c(0.6, 0.4, 0.1, 1))
threshold_vals(c(0.6, 0.4, 0.1, 1), 0.7)
add_vectors(c(1, 2, 3), c(3, 3, 3))
x <- runif(1, 0, 10) # From the Uniform Distribution
if(x > 3) {
y <- 10
} else {
y <- 0
}
x
y
z <- if(x > 3) {
10
} else {
0
}
z
for(i in 1:10) {
print(i)
}
x <- c("a", "b", "c", "d")
for (i in 1:4) {
# Print out each element of 'x'
print(x[i])
}
x
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
for (i in 1:100) {
if (i <= 20) {
# Skip the first 20 iterations
next
}      # Do something here
}
for (i in 1:100) {
print(i)
if (i > 20) {
# Stop loop after 20 iterations
break
}
}
x <- 5
xx <- c(4, 6, 7, 8, 2, 11)
compute_zscore <- function(val, vec) {
z <- (val - mean(vec)) / sd(vec)
}
print(compute_zscore(x, xx))
print(compute_zscore(x, c(1, 1, 1, 1)))
xx_na <- c(1, NA, 3, 5)
print(compute_zscore(x, xx_na))
is_odd <- function(x){ if (x %% 2 == 1) {
return(1)
} else {
return(0)
}
}
is_odd(4)
is_odd(3)
threshold_vals <- function(p, thresh = 0.5) {
# for each element in p, returns TRUE if value > thresh, else FALSE
p > thresh
}
threshold_vals(c(0.6, 0.4, 0.1, 1))
threshold_vals(c(0.6, 0.4, 0.1, 1), 0.7)
add_vectors(c(1, 2, 3), c(3, 3, 3))
add_vectors(c(1, 2, 3), c(3, 3, 3))
#| eval: false
add_vectors(c(1, 2, 3), c(3, 3, 3, 3)) # breaks
z <- 4
test_fcn <- function(x) {
x^z
}
z <- 4
test_fcn <- function(x) {
x^z
}
add_vectors(c(1, 2, 3), c(3, 3, 3))
#| eval: true
add_vectors(c(1, 2, 3), c(3, 3, 3, 3)) # breaks
#| eval: false
add_vectors(c(1, 2, 3), c(3, 3, 3, 3)) # breaks
add_vectors(c(1, 2, 3), c(3, 3, 3))
add_vectors <- function(x, y) {
# assert the lengths of vectors x and y match
# if they do, sum elementwise, else throw error with stop()
if (length(x) != length(y)) {
stop("x and y must be the same length", call. = FALSE)
}
x + y
}
add_vectors(c(1, 2, 3), c(3, 3, 3))
#| eval: false
add_vectors(c(1, 2, 3), c(3, 3, 3, 3)) # breaks
z <- 4
test_fcn <- function(x) {
x^z
}
test_fcn(2)
