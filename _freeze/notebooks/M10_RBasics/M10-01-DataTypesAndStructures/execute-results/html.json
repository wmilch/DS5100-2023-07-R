{
  "hash": "61a1ec9299b4d15be6a11bcd0b7e7cac",
  "result": {
    "markdown": "---\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n# NB: Getting Started\n\n## Preliminaries\n\n### Installing and Loading Packages\n\nPackages need to be installed once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## install.packages(\"tm\")  \n```\n:::\n\n\nYou can also install thing using the Package window.\n\nOnce they are installed, you import them with the `library()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: NLP\n```\n:::\n:::\n\n\nNote that the library name is quoted in when installing, but not when\nusing `library`.\n\n### R's Design\n\n-   Designed to support statistical computing\n-   Very strong community\n-   Many domain-specific functions are built in\n-   Vector first thinking\n-   Everything is an object\n\n### R Syntax\n\n-   Syntax loosely follows traditional `C`-style\n    -   **Braces** `{` and `}` are used to form blocks.\n    -   **Semi-colons** are used optionally to end statements, required\n        if on same line.\n-   **Assignments** are made with `<-` or `->`\n-   **Dots** `.` have no special meaning -- they are not operators.\n-   Single and double **quotes** have the same meaning, but double\n    quotes tend to be preferred.\n    -   Use single quotes if you expect your string to contain double\n        quotes.\n\n    -   Backslash escape applies to R strings, although since there are\n        no raw strings -- Python's `r\" \"` -- we often have to supply\n        double backslashes in regular expressions.\\\n\n## R Data Types\n\nThere are several basic R data types.\n\n-   Numeric\n-   Integer\n-   Complex\n-   Logical\n-   Character\n\n### Numeric\n\nDecimal values are called \"numerics\" in R.\n\nIt is the **default** data type.\n\nIf we assign a decimal value to a variable x, x will be of numeric type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10.5       # assign a decimal value \nx              # print the value of x \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(x)      # print the class name of x \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nEven if we assign an integer to a variable k, it is will still be saved\nas a numeric value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- 1\nk              # print the value of k \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(k)       # print the class name of k \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nThat k is not an integer can be confirmed with `is.integer()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.integer(k)  # is k an integer? \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n### Integers\n\nTo create an integer variable in R, we use `as.integer()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.integer(3) \ny              # print the value of y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(y)       # print the class name of y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nis.integer(y)  # is y an integer? \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nWe can also declare an integer by appending an `L` suffix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 3L \nis.integer(y)  # is y an integer? \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nWe can coerce, or cast, a numeric value into an integer with\n`as.integer()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(3.14)    # coerce a numeric value \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nAnd we can parse a string for decimal values in much the same way.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(\"5.27\")  # coerce a decimal string \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOn the other hand, it is erroneous trying to parse a non-decimal string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(\"Joe\")   # coerce an non-decimal string \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nWe can convert booleans to numbers this way, too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(TRUE)    # the numeric value of TRUE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nas.integer(FALSE)   # the numeric value of FALSE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n#### Math Operators\n\n| **Operator**   | **Description**             |\n|----------------|-----------------------------|\n| **+**          | addition                    |\n| **-**          | subtraction                 |\n| **\\***         | multiplication              |\n| **/**          | division                    |\n| **\\^ or \\*\\*** | exponentiation              |\n| **x %% y**     | modulus (x mod y) 5%%2 is 1 |\n| **x %/% y**    | integer division 5%/%2 is 2 |\n\n### Logical (Boolean)\n\nA logical value is often created via comparison between variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\ny <- 2   # sample values \nz <- x > y      # is x larger than y? \nz              # print the logical value \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(z)       # print the class name of z \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n#### Logical Operators\n\nStandard logical operations are `&` (and), `|` (or), and `!` (negation).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu <- TRUE\nv <- FALSE\nu & v          # u AND v \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nu | v          # u OR v \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n!u             # negation of u \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nNote that you can use `T` and `F` instead of `TRUE` and `FALSE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- T\nb <- F\na & b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n### Characters\n\nA character object is used to represent string values in R.\n\nWe convert objects into character values with the `as.character()`\nfunction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- as.character(3.14) \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3.14\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(x)       # print the class name of x \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n#### `paste()`\n\nTwo character values can be concatenated with the `paste()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfname <- \"Joe\"\nlname <-\"Smith\" \npaste(fname, lname) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Joe Smith\"\n```\n:::\n:::\n\n\n`paste()` takes a `sep` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"A\", \"B\", \"C\", sep=\"--\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A--B--C\"\n```\n:::\n:::\n\n\n#### `sprintf()`\n\nHowever, it is often more convenient to create a readable string with\nthe `sprintf()` function, which has a C language syntax.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%s has %d dollars\", \"Sam\", 100) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sam has 100 dollars\"\n```\n:::\n:::\n\n\n#### `substr()`\n\nTo extract a substring, we apply the `substr()` function.\n\nHere is an example showing how to extract the substring between the\nthird and twelfth positions in a string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubstr(\"Mary has a little lamb.\", start=3, stop=12) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ry has a l\"\n```\n:::\n:::\n\n\n#### `sub()`\n\nAnd to replace the first occurrence of the word \"little\" by another word\n\"big\" in the string, we apply the `sub()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsub(\"little\", \"big\", \"Mary has a little lamb.\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Mary has a big lamb.\"\n```\n:::\n:::\n\n\n## R Data Structures\n\nBasic R comes with several data structures:\n\n-   Vector\n-   Matrix\n-   Array\n-   List\n-   Data frame\n\nA **vector** is what is called an array in many other programming\nlanguages\n\n> A collection of cells with **a fixed size** where all cells hold the\n> **same data type** (integers or characters or reals or whatever).\n\nA **matrix** is a two-dimensional vector (fixed size, all cell types the\nsame).\n\nAn **array** is a vector with one or more dimensions.\n\n> So, an array with one dimension is (almost) the same as a vector.\\\n> An array with two dimensions is (almost) the same as a matrix.\\\n> An array with three or more dimensions is an n-dimensional array.\n\nA **list** can hold items of different types and the list size can be\nincreased on the fly.\n\n> List contents can be accessed either by **index** (like `mylist[[1]]`)\n> or by **name** (like `mylist$age`).\n\nA **data frame** is called a *table* in many languages.\n\n> Each column holds the same type, and the columns can have header\n> names.\\\n> A data frame is essential a kind of a list --- **a list of vectors**\n> each with the same length, but of varying data types.\n\n**The two most frequently used are Vector and Data frame.**\n\nSo, we will look at vectors and data frames.\n\n> We will also look at lists since they are used internally to construct\n> data frames.\n\n### Vectors and `c()`\n\nA vector is a sequence of data elements of the **same basic type**.\n\nMembers in a vector are officially called ***components***, but many\ncall them ***members***.\n\nVectors may be created with the `c()` function (\"c\" stands for combine).\n\nHere is a vector of three numeric values 2, 3 and 5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2, 3, 5) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 5\n```\n:::\n:::\n\n\nAnd here is a vector of logical values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE, FALSE, TRUE, FALSE, FALSE) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\nA vector can contain character strings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n```\n:::\n:::\n\n\n#### Vectors from sequences using `:`, `seq()`, and `rep()`\n\nVectors can be made out of sequences which may be generated in a few\nways.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns1 <- 2:5\ns1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5\n```\n:::\n:::\n\n\nThe `seq()` function is like Python's `range()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns2 <- seq(from=1, to=5, by=2)  # You can drop the argument names write seq(1,5,2)\ns2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n:::\n\n\nThe `rep()` function will create a series of repeated values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns3 <- rep(1, 5)\ns3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 1 1\n```\n:::\n:::\n\n\n#### `length()`\n\nThe number of members in a vector is given by the `length()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n#### Combining Vectors with `c()`\n\nVectors can be combined via the function `c()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \n c(n, s) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\"  \"3\"  \"5\"  \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n```\n:::\n:::\n\n\n#### Value Coercion\n\nNotice how **the numeric values are being coerced into character\nstrings** when the two vectors are combined.\n\nThis is necessary so as to maintain the same primitive data type for\nmembers in the same vector.\n\n#### Vector Math\n\nArithmetic operations of vectors are performed member-by-member, i.e.,\n**member-wise**.\n\nFor example, suppose we have two vectors a and b.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 3, 5, 7) \nb <- c(1, 2, 4, 8)\n```\n:::\n\n\nThen, if we multiply a by 5, we would get a vector with each of its\nmembers multiplied by 5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 * a \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5 15 25 35\n```\n:::\n:::\n\n\nAnd if we add a and b together, the sum would be a vector whose members\nare the sum of the corresponding members from a and b.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na + b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  5  9 15\n```\n:::\n:::\n\n\nSimilarly for subtraction, multiplication and division, we get new\nvectors via member-wise operations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na - b \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0  1  1 -1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na * b \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  6 20 56\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na / b \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.000 1.500 1.250 0.875\n```\n:::\n:::\n\n\n#### The Recycling Rule\n\nIf two vectors are of unequal length, the **shorter one will be\nrecycled** in order to match the longer vector.\n\nFor example, the following vectors u and v have different lengths, and\ntheir sum is computed by recycling values of the shorter vector u.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu <- c(10, 20, 30) \nv <- c(1, 2, 3, 4, 5, 6, 7, 8, 9) \nu + v \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11 22 33 14 25 36 17 28 39\n```\n:::\n:::\n\n\n#### Vector Indexes\n\nWe retrieve values in a vector by declaring an index inside a single\nsquare bracket index `[]` operator.\n\nVector indexes are 1-based.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \ns[3] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cc\"\n```\n:::\n:::\n\n\n#### Negative Indexing\n\nUnlike Python, if the index is negative, **it will remove the member**\nwhose position has the same absolute value as the negative index.\n\nIt really does mean subtraction!\n\nFor example, the following creates a vector slice with the third member\nremoved.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns[-3] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aa\" \"bb\" \"dd\" \"ee\"\n```\n:::\n:::\n\n\n#### Out-of-Range Indexes\n\nValues for out-of-range indexes are reported as NA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns[10] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n#### Numeric Index Vectors\n\nA new vector can be sliced from a given vector with a numeric vector\npassed to the indexing operator.\n\nIndex vectors consist of member positions of the original vector to be\nretrieved.\n\nHere we see how to retrieve a vector slice containing the second and\nthird members of a given vector `s`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \ns[c(2, 3)] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"bb\" \"cc\"\n```\n:::\n:::\n\n\n#### Duplicate Indexes\n\nThe index vector allows duplicate values. Hence the following retrieves\na member twice in one operation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns[c(2, 3, 3)] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"bb\" \"cc\" \"cc\"\n```\n:::\n:::\n\n\n#### Out-of-Order Indexes\n\nThe index vector can even be out-of-order. Here is a vector slice with\nthe order of first and second members reversed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns[c(2, 1, 3)] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"bb\" \"aa\" \"cc\"\n```\n:::\n:::\n\n\n#### Range Index\n\nTo produce a vector slice between two indexes, we can use the colon\noperator \":\". This can be convenient for situations involving large\nvectors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns[2:4] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"bb\" \"cc\" \"dd\"\n```\n:::\n:::\n\n\n#### Logical Index Vectors\n\nA new vector can be sliced from a given vector with a logical index\nvector.\n\nThe logical vector must the same length as the original vector.\n\nIts members are TRUE if the corresponding members in the original vector\nare to be included in the slice, and FALSE if otherwise.\n\n> This is what we called **boolean filtering** and masking in Python.\n\nFor example, consider the following vector s of length 5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\")\n```\n:::\n\n\nTo retrieve the the second and fourth members of s, we define a logical\nvector L of the same length, and have its second and fourth members set\nas TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL = c(FALSE, TRUE, FALSE, TRUE, FALSE)\ns[L] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"bb\" \"dd\"\n```\n:::\n:::\n\n\nThe code can be abbreviated into a single line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns[c(FALSE, TRUE, FALSE, TRUE, FALSE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"bb\" \"dd\"\n```\n:::\n:::\n\n\n#### Naming Vector Members with `names()`\n\nWe can assign names to vector members.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(\"Mary\", \"Sue\") \nnames(v) <- c(\"First\", \"Last\") \nv \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n First   Last \n\"Mary\"  \"Sue\" \n```\n:::\n:::\n\n\nNow we can retrieve the first member by name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv[\"First\"] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n First \n\"Mary\" \n```\n:::\n:::\n\n\nWe can also reverse the order with a character string index vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv[c(\"Last\", \"First\")] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Last  First \n \"Sue\" \"Mary\" \n```\n:::\n:::\n\n\n### Lists\n\nA list is a generic vector containing other objects.\n\nThe following variable `x` is a list containing copies of three vectors\n`n`, `s`, `b`, and `a` numeric value 3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \nb <- c(TRUE, FALSE, TRUE, FALSE, FALSE) \n\nx <- list(n, s, b, 3)   # x contains copies of n, s, b\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 2 3 5\n\n[[2]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n[[4]]\n[1] 3\n```\n:::\n:::\n\n\nNote that odd bracket notation.\n\nEach list member **contains** a vector.\n\n#### List Slicing\n\nWe retrieve a list slice with the single square bracket `[]` operator.\n\nThe following is a slice containing the second member of `x`, which is a\ncopy of `s`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[2] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n```\n:::\n:::\n\n\nWith an index vector, we can retrieve a slice with multiple members.\n\nHere a slice containing the second and fourth members of x.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[c(2, 4)] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[2]]\n[1] 3\n```\n:::\n:::\n\n\n#### Member Reference with `[[]]`\n\nTo reference a list member directly, we use the double square bracket\n`[[]]` operator.\n\nThe following object `x[[2]]` is the second member of `x`.\n\nIn other words, **`x[[2]]` is a copy of `s`, but is not a slice\ncontaining `s` or its copy**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n```\n:::\n:::\n\n\nWe can modify its content directly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[[2]][1] = \"ta\" \nx[[2]] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ta\" \"bb\" \"cc\" \"dd\" \"ee\"\n```\n:::\n:::\n\n\nAnd `s` is unaffected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n```\n:::\n:::\n\n\n### Data Frames\n\nA data frame is used for storing data tables.\n\nIt is essentially **a list of vectors of equal length**. For example,\nthe following variable df is a data frame containing three vectors `n`,\n`s`, `b`.\n\nYou can think of a data frame is a special kind of list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- c(2, 3, 5) \ns <- c(\"aa\", \"bb\", \"cc\") \nb <- c(TRUE, FALSE, TRUE) \ndf <- data.frame(n, s, b) # df is a data frame\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  n  s     b\n1 2 aa  TRUE\n2 3 bb FALSE\n3 5 cc  TRUE\n```\n:::\n:::\n\n\nNotice that data frames are built **column-wise** -- this is true of\nPandas data frames as well.\n\nThe top line of the data frame is the **header**; it contains the column\nnames.\n\nThe data type is list below the column name.\n\nEach horizontal line afterward denotes a data row, which begins with the\nname of the row, and then followed by the actual data.\n\nEach data member of a row is called a cell.\n\n#### Built-in Data Frames\n\nHere is a built-in data frame in R, called `mtcars`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n:::\n:::\n\n\nTo retrieve data in a cell, we would enter its **row** and **column**\ncoordinates in the single square bracket `[ ]` operator.\n\nThe two coordinates are separated by a comma, e.g. `[row, col]`.\n\nHere is the cell value from the first row, second column of mtcars.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[1, 2] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nWe can use names instead of the numeric coordinates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[\"Mazda RX4\", \"cyl\"] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nLastly, the number of data rows in the data frame is given by the\n`nrow()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(mtcars)    # number of data rows \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n:::\n\n\nAnd the number of columns of a data frame is given by the `ncol()`\nfunction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(mtcars)    # number of columns \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32 11\n```\n:::\n:::\n\n\nFurther details of the mtcars data set is available in the R\ndocumentation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(mtcars)\n```\n:::\n\n\n#### Preview with `head()`\n\nInstead of printing out the entire data frame, it is often desirable to\npreview it with the head function beforehand\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n:::\n\n\n#### Data Frame Column Vectors\n\nWe reference a data frame column with the double square bracket `[[]]`\noperator, just as we do for lists.\n\nFor example, to retrieve the ninth column vector of the built-in data\nset mtcars, we write mtcars\\[\\[9\\]\\]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[[9]] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n```\n:::\n:::\n\n\nWe can retrieve the same column vector by its name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[[\"am\"]] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n```\n:::\n:::\n\n\nWe can also retrieve with the \"\\$\" operator in lieu of the double square\nbracket operator\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars$am \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n```\n:::\n:::\n\n\nYet another way to retrieve the same column vector is to use the single\nsquare bracket \"\\[\\]\" operator. We prepend the column name with a comma\ncharacter, which signals a wildcard match for the row position\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[, \"am\"] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n```\n:::\n:::\n\n\n#### Data Frame Column Slice\n\nWe retrieve a data frame column **slice** with the single square bracket\n`[ ]` operator.\n\nNote: This is like a one-column dataframe in Pandas, as opposed to a\nSeries.\n\n##### Numeric Indexing\n\nThe following is a slice containing the first column of the built-in\ndata set mtcars\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[1] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n```\n:::\n:::\n\n\n##### Name Indexing\n\nWe can retrieve the same column slice by its name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[\"mpg\"] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n```\n:::\n:::\n\n\nCompare to accessing the column vector data directly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[[\"mpg\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n```\n:::\n:::\n\n\nThis is similar to the `.values()` method in Pandas, which returns the\nraw NumPy array\n\nTo retrieve a data frame slice with the two columns mpg and hp, we pack\nthe column names in an index vector inside the single square bracket\noperator\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[c(\"mpg\", \"hp\")] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg  hp\nMazda RX4           21.0 110\nMazda RX4 Wag       21.0 110\nDatsun 710          22.8  93\nHornet 4 Drive      21.4 110\nHornet Sportabout   18.7 175\nValiant             18.1 105\nDuster 360          14.3 245\nMerc 240D           24.4  62\nMerc 230            22.8  95\nMerc 280            19.2 123\nMerc 280C           17.8 123\nMerc 450SE          16.4 180\nMerc 450SL          17.3 180\nMerc 450SLC         15.2 180\nCadillac Fleetwood  10.4 205\nLincoln Continental 10.4 215\nChrysler Imperial   14.7 230\nFiat 128            32.4  66\nHonda Civic         30.4  52\nToyota Corolla      33.9  65\nToyota Corona       21.5  97\nDodge Challenger    15.5 150\nAMC Javelin         15.2 150\nCamaro Z28          13.3 245\nPontiac Firebird    19.2 175\nFiat X1-9           27.3  66\nPorsche 914-2       26.0  91\nLotus Europa        30.4 113\nFord Pantera L      15.8 264\nFerrari Dino        19.7 175\nMaserati Bora       15.0 335\nVolvo 142E          21.4 109\n```\n:::\n:::\n\n\n#### Data Frame Row Slice\n\nWe retrieve rows from a data frame with the single square bracket\noperator, just like what we did with columns. However, in additional to\nan index vector of row positions, we append an extra comma character.\nThis is important, as the extra comma signals a wildcard match for the\nsecond coordinate for column positions.\n\n##### Numeric Indexing\n\nFor example, the following retrieves a row record of the built-in data\nset mtcars. Please notice the extra comma in the square bracket\noperator, and it is not a typo. It states that the 1974 Camaro Z28 has a\ngas mileage of 13.3 miles per gallon, and an eight cylinder 245 horse\npower engine, ..., etc\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[24,] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n```\n:::\n:::\n\n\nTo retrieve more than one rows, we use a numeric index vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[c(3, 24),] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108  93 3.85 2.32 18.61  1  1    4    1\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n```\n:::\n:::\n\n\n##### Name Indexing\n\nWe can retrieve a row by its name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[\"Camaro Z28\",] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n```\n:::\n:::\n\n\nAnd we can pack the row names in an index vector in order to retrieve\nmultiple rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[c(\"Datsun 710\", \"Camaro Z28\"),] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108  93 3.85 2.32 18.61  1  1    4    1\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n```\n:::\n:::\n\n\n##### Logical Indexing\n\nLastly, we can retrieve rows with a logical index vector. In the\nfollowing vector L, the member value is TRUE if the car has automatic\ntransmission, and FALSE if otherwise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL <- mtcars$am == 0 \nL \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n[25]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\nHere is the list of vehicles with automatic transmission\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[L,] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n```\n:::\n:::\n\n\nAnd here is the gas mileage data for automatic transmission\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars[L,]$mpg \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 10.4 14.7 21.5\n[16] 15.5 15.2 13.3 19.2\n```\n:::\n:::\n\n\n##### Change the name of a column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df)[names(df) == 'old.var.name'] <- 'new.var.name'\n```\n:::\n\n\n#### Importing Data\n\nIt is often necessary to import sample textbook data into R before you\nstart working on your homework.\n\n**Excel Files**\n\nQuite frequently, the sample data is in Excel format, and needs to be\nimported into R prior to use. For this, we can use the function read.xls\nfrom the gdata package. It reads from an Excel spreadsheet and returns a\ndata frame. The following shows how to load an Excel spreadsheet named\n\"mydata.xls\". This method requires Perl runtime to be present in the\nsystem\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##library(gdata)                   # load gdata package \n##help(read.xls)                   # documentation \n##mydata <- read.xls(\"mydata.xls\")  # read from first sheet\n```\n:::\n\n\nAlternatively, we can use the function loadWorkbook from the XLConnect\npackage to read the entire workbook, and then load the worksheets with\nreadWorksheet. The XLConnect package requires Java to be pre-installed\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##library(XLConnect)               # load XLConnect package \n##wk <- loadWorkbook(\"mydata.xls\") \n##df <- readWorksheet(wk, sheet=\"Sheet1\")\n```\n:::\n\n\n**Table Files**\n\nA data table can resides in a text file.\n\nThe cells inside the table are separated by blank characters.\n\nHere is an example of a table with 4 rows and 3 columns.\n\n```         \n100 a1 b1 \n200 a2 b2 \n300 a3 b3 \n400 a4 b4\n```\n\nNow copy and paste the table above in a file named \"mydata.txt\" with a\ntext editor.\n\nThen load the data into the workspace with the function read.table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read.table(\"mydata.txt\")  # read text file \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in read.table(\"mydata.txt\"): incomplete final line found by\nreadTableHeader on 'mydata.txt'\n```\n:::\n\n```{.r .cell-code}\nmydata                             # print data frame \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   V1 V2 V3\n1 100 a1 b1\n2 200 a2 b2\n3 300 a3 b3\n4 400 a4 b4\n```\n:::\n:::\n\n\n**CSV Files**\n\nThe sample data can also be in comma separated values (CSV) format. Each\ncell inside such data file is separated by a special character, which\nusually is a comma, although other characters can be used as well.\n\nThe first row of the data file should contain the column names instead\nof the actual data. Here is a sample of the expected format.\n\n```         \nCol1,Col2,Col3 \n100,a1,b1 \n200,a2,b2 \n300,a3,b3\n```\n\nAfter we copy and paste the data above in a file named \"mydata.csv\" with\na text editor, we can read the data with the function read.csv\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read.csv(\"mydata.csv\")  # read csv file \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in read.table(file = file, header = header, sep = sep, quote = quote, :\nincomplete final line found by readTableHeader on 'mydata.csv'\n```\n:::\n\n```{.r .cell-code}\nmydata \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Col1 Col2 Col3\n1  100   a1  b1 \n2  200   a2  b2 \n3  300   a3   b3\n```\n:::\n:::\n\n\nIn various European locales, as the comma character serves as the\ndecimal point, the function read.csv2 should be used instead. For\nfurther detail of the read.csv and read.csv2 functions, please consult\nthe R documentation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(read.csv)\n```\n:::\n\n\n#### Working Directory\n\nFinally, the code samples above assume the data files are located in the\nR working directory, which can be found with the function `getwd()`.\n\nNote that these things can also be set using the RStudio's GUI.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()               # get current working directory\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/rca2t1/Dropbox/Courses/DS/DS5100/DS5100-2023-07-R/repo/notebooks/M10_RBasics\"\n```\n:::\n:::\n\n\nYou can select a different working directory with the function setwd(),\nand thus avoid entering the full path of the data files\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## setwd(\"<new path>\")   # set working directory\n```\n:::\n\n\nNote that the forward slash should be used as the path separator even on\nWindows platform\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## setwd(\"C:/MyDoc\")\n```\n:::\n\n\n## Extra\n\n### Plots with `plot()`\n\nR is know for its high-quality visualizations, and we'll explore at\nthese in more detail when we look at GGPlot.\n\nFor now, consider the `plot()` function.\n\nLet's plot the data from the built in data frame `airquality`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairquality\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Ozone Solar.R Wind Temp Month Day\n1      41     190  7.4   67     5   1\n2      36     118  8.0   72     5   2\n3      12     149 12.6   74     5   3\n4      18     313 11.5   62     5   4\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n7      23     299  8.6   65     5   7\n8      19      99 13.8   59     5   8\n9       8      19 20.1   61     5   9\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n12     16     256  9.7   69     5  12\n13     11     290  9.2   66     5  13\n14     14     274 10.9   68     5  14\n15     18      65 13.2   58     5  15\n16     14     334 11.5   64     5  16\n17     34     307 12.0   66     5  17\n18      6      78 18.4   57     5  18\n19     30     322 11.5   68     5  19\n20     11      44  9.7   62     5  20\n21      1       8  9.7   59     5  21\n22     11     320 16.6   73     5  22\n23      4      25  9.7   61     5  23\n24     32      92 12.0   61     5  24\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n28     23      13 12.0   67     5  28\n29     45     252 14.9   81     5  29\n30    115     223  5.7   79     5  30\n31     37     279  7.4   76     5  31\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n38     29     127  9.7   82     6   7\n39     NA     273  6.9   87     6   8\n40     71     291 13.8   90     6   9\n41     39     323 11.5   87     6  10\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n44     23     148  8.0   82     6  13\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n47     21     191 14.9   77     6  16\n48     37     284 20.7   72     6  17\n49     20      37  9.2   65     6  18\n50     12     120 11.5   73     6  19\n51     13     137 10.3   76     6  20\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n62    135     269  4.1   84     7   1\n63     49     248  9.2   85     7   2\n64     32     236  9.2   81     7   3\n65     NA     101 10.9   84     7   4\n66     64     175  4.6   83     7   5\n67     40     314 10.9   83     7   6\n68     77     276  5.1   88     7   7\n69     97     267  6.3   92     7   8\n70     97     272  5.7   92     7   9\n71     85     175  7.4   89     7  10\n72     NA     139  8.6   82     7  11\n73     10     264 14.3   73     7  12\n74     27     175 14.9   81     7  13\n75     NA     291 14.9   91     7  14\n76      7      48 14.3   80     7  15\n77     48     260  6.9   81     7  16\n78     35     274 10.3   82     7  17\n79     61     285  6.3   84     7  18\n80     79     187  5.1   87     7  19\n81     63     220 11.5   85     7  20\n82     16       7  6.9   74     7  21\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n85     80     294  8.6   86     7  24\n86    108     223  8.0   85     7  25\n87     20      81  8.6   82     7  26\n88     52      82 12.0   86     7  27\n89     82     213  7.4   88     7  28\n90     50     275  7.4   86     7  29\n91     64     253  7.4   83     7  30\n92     59     254  9.2   81     7  31\n93     39      83  6.9   81     8   1\n94      9      24 13.8   81     8   2\n95     16      77  7.4   82     8   3\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n99    122     255  4.0   89     8   7\n100    89     229 10.3   90     8   8\n101   110     207  8.0   90     8   9\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n104    44     192 11.5   86     8  12\n105    28     273 11.5   82     8  13\n106    65     157  9.7   80     8  14\n107    NA      64 11.5   79     8  15\n108    22      71 10.3   77     8  16\n109    59      51  6.3   79     8  17\n110    23     115  7.4   76     8  18\n111    31     244 10.9   78     8  19\n112    44     190 10.3   78     8  20\n113    21     259 15.5   77     8  21\n114     9      36 14.3   72     8  22\n115    NA     255 12.6   75     8  23\n116    45     212  9.7   79     8  24\n117   168     238  3.4   81     8  25\n118    73     215  8.0   86     8  26\n119    NA     153  5.7   88     8  27\n120    76     203  9.7   97     8  28\n121   118     225  2.3   94     8  29\n122    84     237  6.3   96     8  30\n123    85     188  6.3   94     8  31\n124    96     167  6.9   91     9   1\n125    78     197  5.1   92     9   2\n126    73     183  2.8   93     9   3\n127    91     189  4.6   93     9   4\n128    47      95  7.4   87     9   5\n129    32      92 15.5   84     9   6\n130    20     252 10.9   80     9   7\n131    23     220 10.3   78     9   8\n132    21     230 10.9   75     9   9\n133    24     259  9.7   73     9  10\n134    44     236 14.9   81     9  11\n135    21     259 15.5   76     9  12\n136    28     238  6.3   77     9  13\n137     9      24 10.9   71     9  14\n138    13     112 11.5   71     9  15\n139    46     237  6.9   78     9  16\n140    18     224 13.8   67     9  17\n141    13      27 10.3   76     9  18\n142    24     238 10.3   68     9  19\n143    16     201  8.0   82     9  20\n144    13     238 12.6   64     9  21\n145    23      14  9.2   71     9  22\n146    36     139 10.3   81     9  23\n147     7      49 10.3   69     9  24\n148    14      20 16.6   63     9  25\n149    30     193  6.9   70     9  26\n150    NA     145 13.2   77     9  27\n151    14     191 14.3   75     9  28\n152    18     131  8.0   76     9  29\n153    20     223 11.5   68     9  30\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(airquality)\n```\n\n::: {.cell-output-display}\n![](M10-01-DataTypesAndStructures_files/figure-html/unnamed-chunk-194-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(airquality[, c(\"Temp\", \"Wind\")])\n```\n\n::: {.cell-output-display}\n![](M10-01-DataTypesAndStructures_files/figure-html/unnamed-chunk-196-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(airquality$Temp, type='l')\n```\n\n::: {.cell-output-display}\n![](M10-01-DataTypesAndStructures_files/figure-html/unnamed-chunk-198-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n?plot\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on topic 'plot' was found in the following packages:\n\n  Package               Library\n  graphics              /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n  base                  /Library/Frameworks/R.framework/Resources/library\n\n\nUsing the first match ...\n```\n:::\n:::\n\n\n### Value Counts with `table()`\n\nThis function is like `.value_counts()` in Pandas. It does a quick count\nof all the value types of a feature or combination of them.\n\nHere we get a table of values and their counts for `airquality$Temp`,\nconvert this into a data frame, and then plot the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemps <- table(airquality$Temp)\ntemps\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n56 57 58 59 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 \n 1  3  2  2  3  2  1  2  2  3  4  4  3  1  3  3  5  4  4  9  7  6  6  5 11  9 \n83 84 85 86 87 88 89 90 91 92 93 94 96 97 \n 4  5  5  7  5  3  2  3  2  5  3  2  1  1 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntemps.df <- data.frame(temps)\ntemps.df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Var1 Freq\n1    56    1\n2    57    3\n3    58    2\n4    59    2\n5    61    3\n6    62    2\n7    63    1\n8    64    2\n9    65    2\n10   66    3\n11   67    4\n12   68    4\n13   69    3\n14   70    1\n15   71    3\n16   72    3\n17   73    5\n18   74    4\n19   75    4\n20   76    9\n21   77    7\n22   78    6\n23   79    6\n24   80    5\n25   81   11\n26   82    9\n27   83    4\n28   84    5\n29   85    5\n30   86    7\n31   87    5\n32   88    3\n33   89    2\n34   90    3\n35   91    2\n36   92    5\n37   93    3\n38   94    2\n39   96    1\n40   97    1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(temps.df, xlab=\"Temp\", type=\"b\")\n```\n\n::: {.cell-output-display}\n![](M10-01-DataTypesAndStructures_files/figure-html/unnamed-chunk-206-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "M10-01-DataTypesAndStructures_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}